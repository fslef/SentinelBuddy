name: Build and Deploy PowerShell Module

on:
  push:
    branches:
      - main
      - 'feature/**'
      - develop
      - 'release/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup PowerShell
      uses: actions/setup-powershell@v1
      with:
        version: '7.x'

    - name: Install dependencies
      run: |
        Install-Module Pester -Scope CurrentUser -Force
        Install-Module PowerShellGet -Scope CurrentUser -Force

    - name: Run Pester tests
      run: |
        $testResults = Invoke-Pester -OutputFormat NUnitXml -OutputFile TestResults.xml -PassThru
        if ($env:GITHUB_EVENT_NAME -eq 'push' -and $env:GITHUB_REF -eq 'refs/heads/main' -and $testResults.FailedCount -gt 0) {
          throw "Tests failed. Aborting deployment for release."
        }
      shell: pwsh

    - name: Upload test results
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-results
        path: TestResults.xml

    - name
        Install GitVersion
      run: dotnet tool install --global GitVersion.Tool --version 5.x
      shell: pwsh

    - name: Bump version and create GitHub release
      if: github.event_name == 'push'
      run: |
        $gitVersion = gitversion /output json /showvariable SemVer
        if ($env:GITHUB_REF -eq 'refs/heads/main') {
          # Bump version and create release
          $version = $gitVersion
        } elseif ($env:GITHUB_REF -like 'refs/heads/feature/*') {
          # Append pre-version build for feature branches
          $version = "$gitVersion-alpha"
        } else {
          # Keep version as-is for develop, release/** and hotfix/** branches
          $version = $gitVersion
        }
        Write-Host "Version: $version"
      shell: pwsh

    - name: Publish to PowerShell Gallery
      run: |
        # Uncomment the following lines to enable publishing to the PowerShell Gallery
        # $moduleManifest = Get-ChildItem -Path . -Filter *.psd1 -Recurse
        # Publish-Module -Path $moduleManifest.Directory -NuGetApiKey ${{ secrets.PS_GALLERY_API_KEY }} -Confirm:$false
      shell: pwsh
      if: github.event_name == 'push' && github.ref == 'refs/
